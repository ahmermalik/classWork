Ajax is a set of Web development techniques
using many Web technologies on the client side to create asynchronous Web applications.

Kind of like a Python Pickle but only simple data types are supported
strings, numbers, arrays, objects, true, false, null


//OLD STYLE//
-------------------------------------------------------
var httpRequest;
function request_change () {
  if (httpRequest.readyState === XMLHttpRequest.DONE) {
    if (httpRequest.status === 200) {
      // do something with httpRequest.responseText
    }
}
httpRequest = new XMLHttpRequest();
httpRequest.onreadystatechange = request_change;
httpRequest.open('GET', 'http://example.com/api.json');
httpRequest.send();
-------------------------------------------------------
-------------------------------------------------------
//NEW STYLE EXAMPLE 1//
-------------------------------------------------------
var rp = require('request-promise');               // this is the request promise library, but you have to download it.
var options = {                                    // Paul recommends this instead of fetch library because it is easier and less lines of code.
  uri: 'http://example.com/api.json',              // This cannot be used in the front end.
  json: true
};
rp(options)
  .then(function (json_object) {
  });

//NEW STYLE EXAMPLE 2//
-------------------------------------------------------
var myHeaders = new Headers();
var myInit = { method: 'GET',                      // this is the fetch library and it comes built in.
               headers: myHeaders,
               mode: 'cors',
               cache: 'default' };
fetch(api_url, myInit)
  .then(function(response) {
    return response.json();
  })
  .then(function(data) {
    console.log(data);
  })
  .catch(function (error) {
    console.error(error);
  });
-------------------------------------------------------
//NEW STYLE USING AXIOS//
-------------------------------------------------------
var api_url = 'https://api.punkapi.com/v2/beers';  //Promise based HTTP client for the browser and node.js
var config = {                                     // This library allows you to use it on the front and back end.
  params: {                                        // Paul recommends you use this over-all.
    brewed_before: "11-2012",
    abv_gt: 6
  }
};
axios.get(api_url, config)
  .then(function (response) {
    console.log(response.data);
  })
  .catch(function (error) {
    console.error(error);
  });